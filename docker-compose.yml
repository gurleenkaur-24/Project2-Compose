# Project2-Compose: Jenkins + Docker-in-Docker (DinD) via TLS
# Purpose:
# - Run a secure Docker daemon (DinD) inside a container.
# - Let Jenkins talk to that daemon over TLS to build/run images.
# - Persist Jenkins data and Docker layer cache using named volumes.

name: project2-compose

services:
  # -----------------------------
  # Docker-in-Docker (DinD) node
  # -----------------------------
  dind:
    image: docker:26-dind                    # Container image that runs 'dockerd'
    container_name: project2-compose-dind
    privileged: true                         # Required so the Docker daemon can start inside the container
    environment:
      - DOCKER_TLS_CERTDIR=/certs            # Instructs dockerd to auto-create TLS server/client certs under /certs
    command:
      - --host=tcp://0.0.0.0:2376            # Listen on TLS port 2376 (ONLY inside the compose network; not published)
      - --host=unix:///var/run/docker.sock   # Keep local UNIX socket for healthcheck/maintenance
      - --storage-driver=overlay2            # Recommended layered FS driver on Linux
    volumes:
      - docker_cache:/var/lib/docker         # Named volume for image layers (speeds repeated builds)
      - docker_certs:/certs                  # Share generated TLS certs so Jenkins can read client certs
    networks:
      - jenkins                              # Private network so 'jenkins' reaches 'dind' by service name
    healthcheck:
      test: ["CMD", "docker", "info"]        # Healthy when 'docker info' succeeds
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped                  # Auto-restart on failure/host reboot

  # -----------------------------
  # Jenkins controller
  # -----------------------------
  jenkins:
    build:
      context: ./jenkins                     # Dockerfile adds Docker CLI (+ compose plugin) into Jenkins image
    container_name: project2-compose-jenkins
    ports:
      - "8080:8080"                          # Jenkins Web UI
      - "50000:50000"                        # Inbound agent port (JNLP)
    environment:
      - DOCKER_HOST=tcp://dind:2376          # Docker CLI target (the DinD daemon)
      - DOCKER_TLS_VERIFY=1                  # Enforce TLS for the Docker client connection
      - DOCKER_CERT_PATH=/certs/client       # Where client certs are mounted in this container
      - JENKINS_OPTS=--prefix=/              # (Optional) base path for Jenkins; '/' by default
      - JAVA_OPTS=-Xms256m -Xmx512m          # JVM heap sizing to avoid OOM on small hosts
    volumes:
      - jenkins_home:/var/jenkins_home       # Persist Jenkins config, jobs, plugins, secrets
      - docker_certs:/certs:ro               # Mount TLS certs read-only; includes /certs/client/* for Docker CLI
    depends_on:
      dind:
        condition: service_healthy           # Start after DinD is ready
    networks:
      - jenkins
    restart: unless-stopped                  # Auto-restart on failure/host reboot

# Isolated network for Jenkins<->DinD traffic
networks:
  jenkins:

# Named volumes that persist across container recreations
volumes:
  jenkins_home:                              # Jenkins HOME data
  docker_cache:                              # Docker image/layer cache for DinD
  docker_certs:                              # TLS certs shared between DinD and Jenkins
